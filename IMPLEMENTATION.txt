
#include "U8glib.h"


const int trigPin_LEFT = 7;
const int echoPin_LEFT = 8;

const int trigPin_RIGHT = 3;
const int echoPin_RIGHT = 4;

long duration_LEFT;
long duration_RIGHT;  
int distance_LEFT;
int distance_RIGHT;




void SonicLEFT();
void SonicRIGHT();









void setup() 
{
  
  

pinMode(trigPin_LEFT, OUTPUT);// Sets the trigPin as an Output
pinMode(trigPin_RIGHT, OUTPUT);

pinMode(echoPin_LEFT, INPUT); // Sets the echoPin as an Input
pinMode(echoPin_RIGHT, INPUT);
Serial.begin(9600); // Starts the serial communication
}

#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(10, 9, 12, 11, 13);// SW SPI Com: SCK = 10, MOSI = 9, CS = 12, A0 = 11, RES = 1

const int trigPin_LEFT = 7;
const int echoPin_LEFT = 8;

const int trigPin_RIGHT = 3;
const int echoPin_RIGHT = 4;

const int vibration_LEFT = 5;
      int intensity_LEFT;
      
const int vibration_RIGHT = 6;
      int intensity_RIGHT;

long duration_LEFT;
long duration_RIGHT;  
int distance_LEFT;
int distance_RIGHT;

void pageLEFT();
void pageRIGHT();
void pageINFO1();

void left_Arrow();
void right_ARROW();
void Blank_Screen();

void SonicLEFT();
void SonicRIGHT();



const int pageCount = 3;
int p;

void (*pages[pageCount])() = { pageLEFT, pageRIGHT, pageINFO1 };

int timing[pageCount] = { 5,5,5 };

 #define LEFT_bitmap_BMPWIDTH  128
#define LEFT_bitmap_BMPHEIGHT 64


 #define RIGHT_bitmap_BMPWIDTH  128
#define RIGHT_bitmap_BMPHEIGHT 64


const uint8_t LEFT_bitmap[] PROGMEM = {



  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3F,0xE8,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0xFF,0xD4,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x4A,0x7F,0xF6,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x11,0x3F,0xCE,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x63,0xFF,0x8A,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x28,0x1F,0xFF,0xAA,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x19,0xBF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xC3,0xFF,0xFF,0x54,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x2F,0xFF,0xFF,0x20,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x04,0x6A,0x7F,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x09,0x31,0xFF,0xFF,0xFF,0x04,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x12,0x8F,0xFF,0xFF,0xFF,0x40,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x01,0x2A,0xFF,0xFF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x05,0x95,0xFF,0xFF,0xFF,0xFF,0x90,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x04,0x1F,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x20,0x20,0x5F,0x80,
  0x00,0x00,0x00,0x02,0xB9,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x20,0x00,0x00,0x1E,0xC0,
  0x00,0x00,0x00,0x12,0x22,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x20,0x04,0x00,0x3F,0x40,
  0x00,0x00,0x00,0x26,0x9F,0xFF,0xFF,0xFF,0xFF,0xFF,0x94,0x08,0x61,0x99,0x7F,0x80,
  0x00,0x00,0x01,0x64,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC,0x00,
  0x00,0x00,0x06,0x8B,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xF0,0x00,
  0x00,0x00,0x92,0x1F,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x78,0x00,
  0x00,0x01,0x4C,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xFA,0xE1,0x00,
  0x00,0x1C,0x55,0xF5,0x7D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDB,0xF0,0x00,
  0x00,0x42,0x97,0x6F,0xEF,0xAF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xFF,0xB8,0x80,
  0x01,0x94,0x3B,0x7F,0xBB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xFF,0xF6,0xF8,0x00,
  0x04,0x23,0xEA,0xDA,0xFF,0xED,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xDF,0xB0,0x00,
  0x16,0x4D,0x9F,0xAB,0x5D,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x6F,0xBD,0xB0,0x00,
  0x11,0x7A,0xD4,0xEE,0xFB,0xFD,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xDB,0xF8,0x00,
  0x04,0xAE,0xA9,0xBF,0x3D,0xBF,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFE,0xC0,0x40,
  0x25,0x91,0x5F,0x65,0xDB,0xEB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x6A,0x10,0x00,
  0x02,0x04,0x02,0xDB,0xFE,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC4,0x52,0x68,0x00,
  0x08,0x51,0x80,0x08,0x2B,0xBB,0xDF,0xFF,0xFF,0xFF,0xFF,0xDB,0x7B,0xA5,0x10,0x00,
  0x00,0x81,0x30,0x11,0x69,0x93,0xBF,0xFE,0xFF,0xFF,0xFE,0xDA,0xED,0x5A,0x90,0x00,
  0x00,0x28,0x8B,0x85,0x96,0x6D,0xFB,0xFF,0xFF,0xFF,0xFF,0xFF,0xB6,0xA4,0x60,0x00,
  0x00,0x01,0x00,0x34,0x2B,0xF7,0xBF,0xBF,0xFF,0xFF,0xF7,0xF9,0x56,0xE9,0x38,0x00,
  0x00,0x00,0x52,0x4A,0x95,0x9D,0xD9,0xFF,0xFF,0xFF,0xFF,0xEF,0xFD,0x56,0x90,0x00,
  0x00,0x00,0x00,0x83,0x9B,0x6F,0xDF,0xFF,0xFF,0xFF,0xFF,0xFB,0x5C,0xD5,0x00,0x00,
  0x00,0x00,0x00,0x00,0x64,0x6A,0xBB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x9E,0xFC,0x00,
  0x00,0x00,0x00,0x14,0x1F,0xFB,0xFF,0xFF,0xFF,0xFF,0xC0,0x00,0x00,0x40,0x3D,0x40,
  0x00,0x00,0x00,0x00,0x01,0x9E,0xDD,0xBF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x07,0x40,
  0x00,0x00,0x00,0x02,0x04,0xBD,0x7D,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x07,0xC0,
  0x00,0x00,0x00,0x00,0x40,0x07,0xEF,0xF7,0xFF,0xFF,0x00,0x00,0x00,0x00,0x0B,0x80,
  0x00,0x00,0x00,0x00,0x00,0x10,0xE7,0xDF,0xFF,0xFF,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x7F,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x0B,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDE,0xFE,0xF7,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFB,0xF7,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7D,0x5B,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xFB,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xC4,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xA0,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
};





const uint8_t RIGHT_bitmap[] PROGMEM = {



  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x07,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x1F,0xFE,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x2B,0xFD,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x67,0xFA,0x42,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x7B,0xFE,0x54,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x5B,0xFF,0xD3,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x40,0xFF,0xE8,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x25,0xFF,0xFF,0x96,0x40,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFB,0x81,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x09,0xFF,0xFF,0xFC,0x36,0x80,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0x84,0x90,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x20,0xFF,0xFF,0xFF,0xF1,0x44,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x91,0x80,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xE6,0x60,0x00,0x00,0x00,0x00,
  0x01,0x78,0x00,0x10,0x00,0x01,0xFF,0xFF,0xFF,0xFF,0xF0,0x2C,0x00,0x00,0x00,0x00,
  0x03,0xF9,0x84,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0x92,0x00,0x00,0x00,0x00,
  0x02,0xFE,0x10,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xC6,0xD8,0x00,0x00,0x00,
  0x01,0xFC,0x8A,0x59,0x54,0x11,0xFF,0xFF,0xFF,0xFF,0xFF,0xF8,0x04,0x00,0x00,0x00,
  0x00,0x5F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xA2,0x40,0x00,0x00,
  0x02,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xD9,0x10,0x00,0x00,
  0x00,0x0F,0xF7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF9,0x30,0x00,0x00,
  0x00,0x2D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDE,0x86,0x90,0x00,
  0x00,0x1F,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xFD,0xF7,0xEB,0x40,0x00,
  0x00,0x0F,0xDF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x7F,0x7F,0x78,0x2A,0x00,
  0x00,0x0A,0xFF,0xDB,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0xFD,0xA4,0x90,
  0x00,0x1F,0x6D,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xDF,0xFA,0x80,0x25,0x20,
  0x00,0x0F,0x79,0xB7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xA4,0xA0,0x08,0x60,
  0x00,0x09,0xEF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF6,0x58,0x91,0x04,0x81,0x08,
  0x00,0x0B,0xDB,0xDF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF7,0xED,0x54,0x6C,0x28,0x40,0x8C,
  0x00,0x08,0x25,0x56,0xEF,0xBD,0xEF,0xDB,0xB6,0xAC,0x32,0xAB,0x01,0x82,0x06,0x90,
  0x00,0x04,0x5D,0x67,0xEB,0xEF,0xFE,0xFF,0xEF,0x7B,0xAB,0x96,0xB1,0x20,0x21,0x00,
  0x00,0x09,0x42,0xBC,0xBA,0xBB,0x6B,0xBD,0xBA,0xDE,0xED,0x69,0x4C,0x8A,0xA4,0x60,
  0x00,0x01,0xBA,0x77,0x77,0xDF,0x7B,0xB5,0xBD,0x57,0x56,0xDA,0xA2,0x25,0x28,0x00,
  0x00,0x18,0x05,0x55,0x6F,0x75,0xFF,0xFF,0xFB,0xFD,0xED,0x65,0x4A,0x90,0x80,0x00,
  0x00,0x09,0x5A,0xBF,0xDE,0xFF,0xEF,0xFD,0xED,0xA5,0xB9,0x9A,0x95,0xA8,0x00,0x00,
  0x00,0x04,0x25,0x69,0xF7,0xEF,0xFF,0xEF,0x7F,0xFF,0xEB,0x65,0x68,0x00,0x00,0x00,
  0x00,0x0A,0x56,0x9F,0xF7,0xFF,0xFF,0x7F,0xFF,0xFD,0x5D,0xB6,0xC2,0x40,0x00,0x00,
  0x00,0x1A,0x69,0xF5,0xFF,0xFD,0xFF,0xFF,0xF5,0x6B,0xF6,0x59,0x00,0x00,0x00,0x00,
  0x01,0xBC,0x01,0x20,0x00,0x01,0xFF,0xFF,0xFF,0xFE,0x4A,0x54,0x00,0x00,0x00,0x00,
  0x02,0xE0,0x00,0x00,0x00,0x00,0xFF,0xFF,0xE7,0xDB,0xFF,0xD0,0x10,0x00,0x00,0x00,
  0x03,0x60,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0x56,0x00,0x40,0x00,0x00,0x00,
  0x01,0xE0,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFD,0xAB,0xF0,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xE6,0xA0,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xDF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xBF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0xFF,0xFC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x05,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x11,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
};









void setup() 
{
   p = 0;
  
pinMode(vibration_LEFT, OUTPUT);
pinMode(vibration_RIGHT, OUTPUT);  
  
pinMode(trigPin_LEFT, OUTPUT);// Sets the trigPin as an Output
pinMode(trigPin_RIGHT, OUTPUT);

pinMode(echoPin_LEFT, INPUT); // Sets the echoPin as an Input
pinMode(echoPin_RIGHT, INPUT);
Serial.begin(9600); // Starts the serial communication
}



void loop()
{
  
SonicLEFT();
SonicRIGHT();

// Calculating the distance
distance_LEFT= duration_LEFT*0.034/2;
distance_RIGHT= duration_RIGHT*0.034/2;

// Prints the distance on the Serial Monitor
Serial.print("Distance LEFT: ");
Serial.println(distance_LEFT);

Serial.print("Distance RIGHT: ");
Serial.println(distance_RIGHT);

if (distance_LEFT > 30 && distance_LEFT <450 )
{
Left_ARROW();

 if ( distance_LEFT>30 && distance_LEFT < 100)
  {
     digitalWrite(vibration_LEFT, 255*5);
delay(200);
 
 digitalWrite(vibration_LEFT, 0); 
 delay(distance_LEFT/2);
  }
   else {
 digitalWrite(vibration_LEFT, 255*5);
delay(100);
 
 digitalWrite(vibration_LEFT, 0); 
 delay(distance_LEFT*5);

   }
}
else 
Blank_Screen();


if (distance_RIGHT > 30 && distance_RIGHT <450 )

 { Right_ARROW();


     digitalWrite(vibration_RIGHT, 255*5);
delay(100);
 
 digitalWrite(vibration_RIGHT, 0); 
 delay(distance_RIGHT/3);
 
 
  
 }
else

  Blank_Screen();

}





void pageLEFT(void) 


{
  // graphic commands to redraw the complete screen should be placed here  
  u8g.drawBitmapP( 0, 0, 16, 64, LEFT_bitmap);
   delay(5);
   return 0;
}



void pageRIGHT(void) 
{
  // graphic commands to redraw the complete screen should be placed here  
  u8g.drawBitmapP( 0, 0, 16, 64, RIGHT_bitmap);
   delay(5);
   return 0;
}


void pageINFO1(void)

{
  
}

void SonicLEFT(void)

{
  digitalWrite(trigPin_LEFT, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin_LEFT, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin_LEFT, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds
duration_LEFT = pulseIn(echoPin_LEFT, HIGH);

return duration_LEFT;
}

void SonicRIGHT(void)
{

  digitalWrite(trigPin_RIGHT, LOW);
delayMicroseconds(2);
// Sets the trigPin on HIGH state for 10 micro seconds
digitalWrite(trigPin_RIGHT, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin_RIGHT, LOW);
// Reads the echoPin, returns the sound wave travel time in microseconds
duration_RIGHT = pulseIn(echoPin_RIGHT, HIGH);

return duration_RIGHT;
}


void Left_ARROW()
{
  
 u8g.firstPage();  
  do {

      (*pages[0])();
   
   
   delay(20);
  
  
  } while( u8g.nextPage() );
}

void Right_ARROW()
{
  
 u8g.firstPage();  
  do {

      (*pages[1])();
   
   
   delay(10);
  
  
  } while( u8g.nextPage() );

}

void Blank_Screen()
{
   u8g.firstPage();  
  do {

      (*pages[2])();
   
   
   delay(5);
  
  
  } while( u8g.nextPage() );
}